"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendEmailRequest = void 0;
class SendEmailRequest {
    constructor(opts) {
        this.message = {
            to: opts.to,
            identifiers: opts.identifiers,
            attachments: {},
            message_data: opts.message_data,
            headers: opts.headers || {},
            preheader: opts.preheader,
            reply_to: opts.reply_to,
            bcc: opts.bcc,
            plaintext_body: opts.plaintext_body,
            amp_body: opts.amp_body,
            fake_bcc: opts.fake_bcc,
            disable_message_retention: opts.disable_message_retention,
            send_to_unsubscribed: opts.send_to_unsubscribed,
            tracked: opts.tracked,
            queue_draft: opts.queue_draft,
            send_at: opts.send_at,
        };
        if ('transactional_message_id' in opts) {
            this.message.transactional_message_id = opts.transactional_message_id;
        }
        if ('from' in opts) {
            this.message.from = opts.from;
        }
        if ('subject' in opts) {
            this.message.subject = opts.subject;
        }
        if ('body' in opts) {
            this.message.body = opts.body;
        }
    }
    // Use `any` for data here, because union types and overloads in Typescript
    // don't work well together for `Buffer.from`.
    attach(name, data, { encode = true } = {}) {
        if (this.message.attachments[name]) {
            throw new Error(`attachment ${name} already exists`);
        }
        if (encode) {
            this.message.attachments[name] = Buffer.from(data).toString('base64');
        }
        else {
            this.message.attachments[name] = data;
        }
    }
}
exports.SendEmailRequest = SendEmailRequest;
